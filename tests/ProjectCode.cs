/* --- New Code: UnifiedAssessmentViewModel.cs --- / / Place this file in your Models folder. This class unifies all assessment types into one view model. */ 
using System; using System.Collections.Generic;

namespace YourNamespace.Models { public class UnifiedAssessmentViewModel { public long DataEntityID { get; set; } // Unified field for the item name from various assessments (e.g., General Work, Teamwork) public string AssessmentItem { get; set; } public long PerformanceReview { get; set; } public string Employee { get; set; } public DateTime Date { get; set; } public long AgreedRating { get; set; } public string AgreedComments { get; set; } public List<Rating> Ratings { get; set; } // Indicates the type of assessment (e.g., "General Work", "Teamwork", etc.) public string AssessmentType { get; set; } } }

/* --- End of UnifiedAssessmentViewModel.cs --- */

/* --- Modified Controller Code in DashboardController (inside ActionResult Index(...)) --- / / Replace the existing switch block that returns different views for each assessment type with the following code. This code creates a unified list of assessments and returns a single view. NOTE: Variables like CategoryService, Employee, GetRatings, PerformanceReviewName, and AgreedCommentName are assumed already defined. */

List<UnifiedAssessmentViewModel> unifiedAssessments = new List<UnifiedAssessmentViewModel>();

// --- General Work Assessment ---
 ICollection<Dictionary<string, object>> generalWork = CategoryService.ReadSync(CategoryMappings.GeneralWork.NonNECAudit, null, PerformanceFilter, null, null, true); foreach (Dictionary<string, object> workItem in generalWork) { UnifiedAssessmentViewModel item = new UnifiedAssessmentViewModel(); item.DataEntityID = Convert.ToInt64(workItem["DataEntityID"]); item.AssessmentItem = workItem["General Work Item: General Work Item Name"].ToString(); item.PerformanceReview = Convert.ToInt64(workItem[PerformanceReviewName]); item.Employee = "(" + Employee["Employee Number"].ToString() + ") " + Employee["First Name"].ToString() + " " + Employee["Surname"].ToString(); object value; if (workItem.TryGetValue(AgreedCommentName, out value) && value != null) { item.AgreedComments = value.ToString(); } item.AgreedRating = 0; // Default value; update if a rating exists. item.Ratings = GetRatings; item.AssessmentType = "General Work"; unifiedAssessments.Add(item); }

// --- Teamwork Assessment --- 
ICollection<Dictionary<string, object>> teamwork = CategoryService.ReadSync(CategoryMappings.Teamwork.NonNECAudit, null, PerformanceFilter, null, null, true); foreach (Dictionary<string, object> workItem in teamwork) { UnifiedAssessmentViewModel item = new UnifiedAssessmentViewModel(); item.DataEntityID = Convert.ToInt64(workItem["DataEntityID"]); // Assuming field name for teamwork is "Teamwork Item: Teamwork Item Name" 
item.AssessmentItem = workItem["Teamwork Item: Teamwork Item Name"].ToString(); item.PerformanceReview = Convert.ToInt64(workItem[PerformanceReviewName]); item.Employee = "(" + Employee["Employee Number"].ToString() + ") " + Employee["First Name"].ToString() + " " + Employee["Surname"].ToString(); object value; if (workItem.TryGetValue(AgreedCommentName, out value) && value != null) { item.AgreedComments = value.ToString(); } item.AgreedRating = 0; item.Ratings = GetRatings; item.AssessmentType = "Teamwork"; unifiedAssessments.Add(item); }

// --- Leadership Assessment ---
 ICollection<Dictionary<string, object>> leadership = CategoryService.ReadSync(CategoryMappings.Leadership.NonNECAudit, null, PerformanceFilter, null, null, true); foreach (Dictionary<string, object> workItem in leadership) { UnifiedAssessmentViewModel item = new UnifiedAssessmentViewModel(); item.DataEntityID = Convert.ToInt64(workItem["DataEntityID"]); item.AssessmentItem = workItem["Leadership Item: Leadership Item Name"].ToString(); item.PerformanceReview = Convert.ToInt64(workItem[PerformanceReviewName]); item.Employee = "(" + Employee["Employee Number"].ToString() + ") " + Employee["First Name"].ToString() + " " + Employee["Surname"].ToString(); object value; if (workItem.TryGetValue(AgreedCommentName, out value) && value != null) { item.AgreedComments = value.ToString(); } item.AgreedRating = 0; item.Ratings = GetRatings; item.AssessmentType = "Leadership"; unifiedAssessments.Add(item); }

// --- Strategy Assessment --- 
ICollection<Dictionary<string, object>> strategy = CategoryService.ReadSync(CategoryMappings.Strategy.NonNECAudit, null, PerformanceFilter, null, null, true); foreach (Dictionary<string, object> workItem in strategy) { UnifiedAssessmentViewModel item = new UnifiedAssessmentViewModel(); item.DataEntityID = Convert.ToInt64(workItem["DataEntityID"]); item.AssessmentItem = workItem["Strategy Item: Strategy Item Name"].ToString(); item.PerformanceReview = Convert.ToInt64(workItem[PerformanceReviewName]); item.Employee = "(" + Employee["Employee Number"].ToString() + ") " + Employee["First Name"].ToString() + " " + Employee["Surname"].ToString(); object value; if (workItem.TryGetValue(AgreedCommentName, out value) && value != null) { item.AgreedComments = value.ToString(); } item.AgreedRating = 0; item.Ratings = GetRatings; item.AssessmentType = "Strategy"; unifiedAssessments.Add(item); }

// --- Communication Assessment --- 
ICollection<Dictionary<string, object>> communication = CategoryService.ReadSync(CategoryMappings.Communication.NonNECAudit, null, PerformanceFilter, null, null, true); foreach (Dictionary<string, object> workItem in communication) { UnifiedAssessmentViewModel item = new UnifiedAssessmentViewModel(); item.DataEntityID = Convert.ToInt64(workItem["DataEntityID"]); item.AssessmentItem = workItem["Communication Item: Communication Item Name"].ToString(); item.PerformanceReview = Convert.ToInt64(workItem[PerformanceReviewName]); item.Employee = "(" + Employee["Employee Number"].ToString() + ") " + Employee["First Name"].ToString() + " " + Employee["Surname"].ToString(); object value; if (workItem.TryGetValue(AgreedCommentName, out value) && value != null) { item.AgreedComments = value.ToString(); } item.AgreedRating = 0; item.Ratings = GetRatings; item.AssessmentType = "Communication"; unifiedAssessments.Add(item); }

// --- End of unified assessments creation --- // Replace the multiple view returns with the following unified view return: return View("UnifiedManagerRating", unifiedAssessments);

/* --- End of Modified Controller Code --- */

/* --- New Code: UnifiedManagerRating.cshtml --- / / Replace your existing separate ManagerRating[Assessment].cshtml views with this unified view. This view renders a single DevExpress GridView that displays all assessment types. */ @using YourNamespace.Models @using DevExpress.Web @model List<UnifiedAssessmentViewModel>

@if (SessionHelper.GetWorkflowIterationStageCommandID(HttpContext.Current) != null) { @Html.Action("WorkflowHeaderLightPartialView", "Workflows", new { Area = "Workflow", WorkflowIterationStageCommandID = SessionHelper.GetWorkflowIterationStageCommandID(HttpContext.Current) }) <div class="form-control-closer"></div> }
<script type="text/javascript"> // URLs for Ajax callbacks; ensure corresponding controller actions exist. var updateRatingUrl = '@Url.Action("SetUnifiedAgreedRating", "Dashboard")'; var updateCommentsUrl = '@Url.Action("SetUnifiedAgreedComment", "Dashboard")'; function SetRating(s, e) { var ratingValue = s.GetValue(); var dataID = s.GetMainElement().getAttribute('data-assessment-id'); $.ajax({ url: updateRatingUrl, type: 'POST', data: { AssessmentID: dataID, RatingID: ratingValue }, success: function (response) { // Success handling code (if needed) }, error: function (error) { // Error handling code (if needed) } }); if (areAllRatingsCompleted()) { NextButton.SetEnabled(true); } } function checkRatingsPeriodically() { setInterval(function () { NextButton.SetEnabled(areAllRatingsCompleted()); }, 1000); } $(document).ready(function () { checkRatingsPeriodically(); }); function areAllRatingsCompleted() { var grid = ASPxClientControl.GetControlCollection().GetByName('UnifiedAssessments'); // Ensure the grid's name is correct. if (!grid) return false; for (var i = 0; i < grid.GetVisibleRowsOnPage() ; i++) { var comboBox = ASPxClientControl.GetControlCollection().GetByName("Unified[" + i + "].AgreedRating"); if (comboBox) { var ratingValue = comboBox.GetValue(); if (!ratingValue || ratingValue === 0) { return false; } } var memo = ASPxClientControl.GetControlCollection().GetByName("Unified[" + i + "].AgreedComments"); if (memo) { var text = memo.GetText(); if (!text || text === '') { return false; } } } return true; } function SetComment(s, e) { var commentText = s.GetText(); var dataID = s.GetMainElement().getAttribute('data-assessment-id'); $.ajax({ url: updateCommentsUrl, type: 'POST', data: { AssessmentID: dataID, Comments: commentText }, success: function (response) { // Success handling code (if needed) }, error: function (error) { // Error handling code (if needed) } }); } </script>

@Html.DevExpress().GridView(settings => { settings.Name = "UnifiedAssessments"; settings.KeyFieldName = "PerformanceReview"; // Adjust if a different unique key is needed. settings.Styles.Header.Font.Bold = true; settings.Styles.Header.Font.Size = FontUnit.Large; settings.Styles.Header.Font.Name = "Verdana"; settings.Styles.Header.ForeColor = System.Drawing.Color.White; settings.Styles.Header.BackColor = System.Drawing.Color.FromArgb(65, 138, 202);