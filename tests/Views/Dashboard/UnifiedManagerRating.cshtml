@using YourNamespace.Models
@using DevExpress.Web
@model List<UnifiedAssessmentViewModel>

@{
    ViewBag.Title = "Unified Manager Rating";
}

@if (SessionHelper.GetWorkflowIterationStageCommandID(HttpContext.Current) != null)
{
    @Html.Action("WorkflowHeaderLightPartialView", "Workflows", new
    {
        Area = "Workflow",
        WorkflowIterationStageCommandID = SessionHelper.GetWorkflowIterationStageCommandID(HttpContext.Current)
    })
    <div class="form-control-closer"></div>
}

<div class="alert alert-info" role="alert">
    <p>Please complete all ratings and comments before proceeding.</p>
</div>

@if (!string.IsNullOrEmpty(TempData["ErrorMessage"]?.ToString()))
{
    <div class="alert alert-danger" role="alert">
        @TempData["ErrorMessage"]
    </div>
}

<script type="text/javascript">
    // URLs for Ajax callbacks
    const updateRatingUrl = '@Url.Action("SetUnifiedAgreedRating", "Dashboard")';
    const updateCommentsUrl = '@Url.Action("SetUnifiedAgreedComment", "Dashboard")';
    const antiForgeryToken = $('input[name="__RequestVerificationToken"]').val();

    function handleAjaxError(error) {
        console.error('Ajax error:', error);
        const errorMessage = error.responseJSON?.message || 'An error occurred. Please try again.';
        DevExpress.ui.notify(errorMessage, 'error', 3000);
    }

    function SetRating(s, e) {
        const ratingValue = s.GetValue();
        const dataID = s.GetMainElement().getAttribute('data-assessment-id');

        if (!ratingValue) {
            DevExpress.ui.notify('Please select a valid rating', 'warning', 3000);
            return;
        }

        $.ajax({
            url: updateRatingUrl,
            type: 'POST',
            data: {
                AssessmentID: dataID,
                RatingID: ratingValue,
                __RequestVerificationToken: antiForgeryToken
            },
            success: function (response) {
                if (response.success) {
                    DevExpress.ui.notify('Rating updated successfully', 'success', 2000);
                    updateNextButtonState();
                } else {
                    DevExpress.ui.notify(response.message || 'Failed to update rating', 'error', 3000);
                }
            },
            error: handleAjaxError
        });
    }

    function SetComment(s, e) {
        const commentText = s.GetText();
        const dataID = s.GetMainElement().getAttribute('data-assessment-id');

        if (!commentText.trim()) {
            DevExpress.ui.notify('Please enter a comment', 'warning', 3000);
            return;
        }

        $.ajax({
            url: updateCommentsUrl,
            type: 'POST',
            data: {
                AssessmentID: dataID,
                Comments: commentText,
                __RequestVerificationToken: antiForgeryToken
            },
            success: function (response) {
                if (response.success) {
                    DevExpress.ui.notify('Comments updated successfully', 'success', 2000);
                    updateNextButtonState();
                } else {
                    DevExpress.ui.notify(response.message || 'Failed to update comments', 'error', 3000);
                }
            },
            error: handleAjaxError
        });
    }

    function areAllRatingsCompleted() {
        const grid = ASPxClientControl.GetControlCollection().GetByName('UnifiedAssessments');
        if (!grid) return false;

        for (let i = 0; i < grid.GetVisibleRowsOnPage(); i++) {
            const comboBox = ASPxClientControl.GetControlCollection().GetByName(`Unified[${i}].AgreedRating`);
            const memo = ASPxClientControl.GetControlCollection().GetByName(`Unified[${i}].AgreedComments`);

            if (comboBox && (!comboBox.GetValue() || comboBox.GetValue() === 0)) {
                return false;
            }

            if (memo && (!memo.GetText() || !memo.GetText().trim())) {
                return false;
            }
        }
        return true;
    }

    function updateNextButtonState() {
        if (NextButton) {
            NextButton.SetEnabled(areAllRatingsCompleted());
        }
    }

    $(document).ready(function () {
        setInterval(updateNextButtonState, 1000);
        updateNextButtonState();
    });
</script>

@Html.DevExpress().GridView(settings =>
{
    settings.Name = "UnifiedAssessments";
    settings.KeyFieldName = "PerformanceReview";
    settings.Width = Unit.Percentage(100);
    
    // Styling
    settings.Styles.Header.Font.Bold = true;
    settings.Styles.Header.Font.Size = FontUnit.Large;
    settings.Styles.Header.Font.Name = "Verdana";
    settings.Styles.Header.ForeColor = System.Drawing.Color.White;
    settings.Styles.Header.BackColor = System.Drawing.Color.FromArgb(65, 138, 202);
    
    // Columns configuration
    settings.Columns.Add(column =>
    {
        column.FieldName = "AssessmentType";
        column.Caption = "Type";
        column.Width = Unit.Pixel(120);
    });
    
    settings.Columns.Add(column =>
    {
        column.FieldName = "AssessmentItem";
        column.Caption = "Item";
        column.Width = Unit.Pixel(250);
    });
    
    settings.Columns.Add(column =>
    {
        column.FieldName = "Employee";
        column.Caption = "Employee";
        column.Width = Unit.Pixel(200);
    });
    
    // Add other columns and settings as needed
    
    settings.Settings.ShowFilterRow = true;
    settings.Settings.ShowGroupPanel = true;
    settings.SettingsPager.PageSize = 20;
    settings.SettingsBehavior.AllowSort = true;
    
    settings.ClientSideEvents.Init = "function(s, e) { updateNextButtonState(); }";
}).Bind(Model).GetHtml()